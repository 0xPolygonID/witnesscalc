include_directories(
    ../src
    ../build
    ../depends/json/single_include)

link_libraries(${GMP_LIB})

add_definitions(${GMP_DEFINIONS})

if(USE_ASM)
    if(ARCH MATCHES "arm64")
            add_definitions(-DUSE_ASM -DARCH_ARM64)
    elseif(ARCH MATCHES "x86_64")
            add_definitions(-DUSE_ASM -DARCH_X86_64)
    endif()
endif()

if(USE_ASM AND ARCH MATCHES "x86_64")

    if (CMAKE_HOST_SYSTEM_NAME MATCHES "Darwin")
        set(NASM_FLAGS "-fmacho64 --prefix _")
    else()
        set(NASM_FLAGS -felf64)
    endif()

    add_custom_command(OUTPUT ${CMAKE_SOURCE_DIR}/build/fq_asm.o
        COMMAND nasm ${NASM_FLAGS} fq.asm -o fq_asm.o
        DEPENDS ${CMAKE_SOURCE_DIR}/build/fq.asm
        WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}/build)

    add_custom_command(OUTPUT ${CMAKE_SOURCE_DIR}/build/fr_asm.o
        COMMAND nasm ${NASM_FLAGS} fr.asm -o fr_asm.o
        DEPENDS ${CMAKE_SOURCE_DIR}/build/fr.asm
        WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}/build)
endif()

set(FR_SOURCES
    ../build/fr.hpp
    ../build/fr.cpp
    )

if(USE_ASM)
    if(ARCH MATCHES "arm64")
        set(FR_SOURCES ${FR_SOURCES} ../build/fr_raw_arm64.s ../build/fr_raw_generic.cpp ../build/fr_generic.cpp)
    elseif(ARCH MATCHES "x86_64")
        set(FR_SOURCES ${FR_SOURCES} ../build/fr_asm.o)
    endif()
else()
    set(FR_SOURCES ${FR_SOURCES} ../build/fr_generic.cpp ../build/fr_raw_generic.cpp)
endif()

add_library(fr STATIC ${FR_SOURCES})
set_target_properties(fr PROPERTIES POSITION_INDEPENDENT_CODE ON)

link_libraries(fr)


add_executable(tests tests.cpp)
add_executable(test_platform test_platform.cpp)


set(LIB_SOURCES
    calcwit.cpp
    witnesscalc.h
    witnesscalc.cpp
    )

# # auth
# set(AUTH_SOURCES ${LIB_SOURCES}
#     auth.cpp
#     witnesscalc_auth.h
#     witnesscalc_auth.cpp
#     )
#
# add_library(witnesscalc_auth SHARED ${AUTH_SOURCES})
# add_library(witnesscalc_authStatic STATIC ${AUTH_SOURCES})
# set_target_properties(witnesscalc_authStatic PROPERTIES OUTPUT_NAME witnesscalc_auth)
#
# add_executable(auth main.cpp)
# target_link_libraries(auth witnesscalc_authStatic)
#
# target_compile_definitions(witnesscalc_auth PUBLIC CIRCUIT_NAME=auth)
# target_compile_definitions(witnesscalc_authStatic PUBLIC CIRCUIT_NAME=auth)
# target_compile_definitions(auth PUBLIC CIRCUIT_NAME=auth)

# authV2
set(AUTHV2_SOURCES ${LIB_SOURCES}
    authV2.cpp
    witnesscalc_authV2.h
    witnesscalc_authV2.cpp
    )

add_library(witnesscalc_authV2 SHARED ${AUTHV2_SOURCES})
add_library(witnesscalc_authV2Static STATIC ${AUTHV2_SOURCES})
set_target_properties(witnesscalc_authV2Static PROPERTIES OUTPUT_NAME witnesscalc_authV2)

add_executable(authV2 main.cpp)
target_link_libraries(authV2 witnesscalc_authV2Static)

target_compile_definitions(witnesscalc_authV2 PUBLIC CIRCUIT_NAME=authV2)
target_compile_definitions(witnesscalc_authV2Static PUBLIC CIRCUIT_NAME=authV2)
target_compile_definitions(authV2 PUBLIC CIRCUIT_NAME=authV2)

# credentialAtomicQueryMTPOffChain
set(CREDENTIALATOMICQUERYMTPOFFCHAIN_SOURCES ${LIB_SOURCES}
    credentialAtomicQueryMTPOffChain.cpp
    witnesscalc_credentialAtomicQueryMTPOffChain.h
    witnesscalc_credentialAtomicQueryMTPOffChain.cpp
    )

add_library(witnesscalc_credentialAtomicQueryMTPOffChain SHARED ${CREDENTIALATOMICQUERYMTPOFFCHAIN_SOURCES})
add_library(witnesscalc_credentialAtomicQueryMTPOffChainStatic STATIC ${CREDENTIALATOMICQUERYMTPOFFCHAIN_SOURCES})
set_target_properties(witnesscalc_credentialAtomicQueryMTPOffChainStatic PROPERTIES OUTPUT_NAME witnesscalc_credentialAtomicQueryMTPOffChain)

add_executable(credentialAtomicQueryMTPOffChain main.cpp)
target_link_libraries(credentialAtomicQueryMTPOffChain witnesscalc_credentialAtomicQueryMTPOffChainStatic)

target_compile_definitions(witnesscalc_credentialAtomicQueryMTPOffChain PUBLIC CIRCUIT_NAME=credentialAtomicQueryMTPOffChain)
target_compile_definitions(witnesscalc_credentialAtomicQueryMTPOffChainStatic PUBLIC CIRCUIT_NAME=credentialAtomicQueryMTPOffChain)
target_compile_definitions(credentialAtomicQueryMTPOffChain PUBLIC CIRCUIT_NAME=credentialAtomicQueryMTPOffChain)

# credentialAtomicQuerySigOffChain
set(CREDENTIALATOMICQUERYSIGOFFCHAIN_SOURCES ${LIB_SOURCES}
    credentialAtomicQuerySigOffChain.cpp
    witnesscalc_credentialAtomicQuerySigOffChain.h
    witnesscalc_credentialAtomicQuerySigOffChain.cpp
    )

add_library(witnesscalc_credentialAtomicQuerySigOffChain SHARED ${CREDENTIALATOMICQUERYSIGOFFCHAIN_SOURCES})
add_library(witnesscalc_credentialAtomicQuerySigOffChainStatic STATIC ${CREDENTIALATOMICQUERYSIGOFFCHAIN_SOURCES})
set_target_properties(witnesscalc_credentialAtomicQuerySigOffChainStatic PROPERTIES OUTPUT_NAME witnesscalc_credentialAtomicQuerySigOffChain)

add_executable(credentialAtomicQuerySigOffChain main.cpp)
target_link_libraries(credentialAtomicQuerySigOffChain witnesscalc_credentialAtomicQuerySigOffChainStatic)

target_compile_definitions(witnesscalc_credentialAtomicQuerySigOffChain PUBLIC CIRCUIT_NAME=credentialAtomicQuerySigOffChain)
target_compile_definitions(witnesscalc_credentialAtomicQuerySigOffChainStatic PUBLIC CIRCUIT_NAME=credentialAtomicQuerySigOffChain)
target_compile_definitions(credentialAtomicQuerySigOffChain PUBLIC CIRCUIT_NAME=credentialAtomicQuerySigOffChain)

# credentialAtomicQueryMTPOnChain
set(CREDENTIALATOMICQUERYMTPONCHAIN_SOURCES ${LIB_SOURCES}
    credentialAtomicQueryMTPOnChain.cpp
    witnesscalc_credentialAtomicQueryMTPOnChain.h
    witnesscalc_credentialAtomicQueryMTPOnChain.cpp
    )

add_library(witnesscalc_credentialAtomicQueryMTPOnChain SHARED ${CREDENTIALATOMICQUERYMTPONCHAIN_SOURCES})
add_library(witnesscalc_credentialAtomicQueryMTPOnChainStatic STATIC ${CREDENTIALATOMICQUERYMTPONCHAIN_SOURCES})
set_target_properties(witnesscalc_credentialAtomicQueryMTPOnChainStatic PROPERTIES OUTPUT_NAME witnesscalc_credentialAtomicQueryMTPOnChain)

add_executable(credentialAtomicQueryMTPOnChain main.cpp)
target_link_libraries(credentialAtomicQueryMTPOnChain witnesscalc_credentialAtomicQueryMTPOnChainStatic)

target_compile_definitions(witnesscalc_credentialAtomicQueryMTPOnChain PUBLIC CIRCUIT_NAME=credentialAtomicQueryMTPOnChain)
target_compile_definitions(witnesscalc_credentialAtomicQueryMTPOnChainStatic PUBLIC CIRCUIT_NAME=credentialAtomicQueryMTPOnChain)
target_compile_definitions(credentialAtomicQueryMTPOnChain PUBLIC CIRCUIT_NAME=credentialAtomicQueryMTPOnChain)

# credentialAtomicQuerySigOnChain
set(CREDENTIALATOMICQUERYSIGONCHAIN_SOURCES ${LIB_SOURCES}
    credentialAtomicQuerySigOnChain.cpp
    witnesscalc_credentialAtomicQuerySigOnChain.h
    witnesscalc_credentialAtomicQuerySigOnChain.cpp
    )

add_library(witnesscalc_credentialAtomicQuerySigOnChain SHARED ${CREDENTIALATOMICQUERYSIGONCHAIN_SOURCES})
add_library(witnesscalc_credentialAtomicQuerySigOnChainStatic STATIC ${CREDENTIALATOMICQUERYSIGONCHAIN_SOURCES})
set_target_properties(witnesscalc_credentialAtomicQuerySigOnChainStatic PROPERTIES OUTPUT_NAME witnesscalc_credentialAtomicQuerySigOnChain)

add_executable(credentialAtomicQuerySigOnChain main.cpp)
target_link_libraries(credentialAtomicQuerySigOnChain witnesscalc_credentialAtomicQuerySigOnChainStatic)

target_compile_definitions(witnesscalc_credentialAtomicQuerySigOnChain PUBLIC CIRCUIT_NAME=credentialAtomicQuerySigOnChain)
target_compile_definitions(witnesscalc_credentialAtomicQuerySigOnChainStatic PUBLIC CIRCUIT_NAME=credentialAtomicQuerySigOnChain)
target_compile_definitions(credentialAtomicQuerySigOnChain PUBLIC CIRCUIT_NAME=credentialAtomicQuerySigOnChain)